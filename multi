#! /bin/perl

# Parse command-line switches
use Getopt::Std;
%opt = ();
getopts('htqrol', \%opt);

$usage  = "multi [opts] cmd bef aft [files]\n";
$usage .= "     generate 'cmd filebef.ext fileaft.ext' for all filenames\n";
$usage .= "     that match pattern 'bef', replacing with 'aft'\n";
$usage .= " -h      help; print this message\n";
$usage .= " -t      test-only; print commands and do nothing\n";
$usage .= " -q      quiet; execute commands but do not print\n";
$usage .= " -r      redirect; cmd filebef.ext > fileaft.ext\n";
$usage .= " -o      -o switch; cmd -o fileaft.ext filebef.ext\n";
$usage .= " -l      like grep -l; print only filebef.ext that yield STDOUT\n";
if ($opt{h}) {
    print $usage;
    exit;
}

$cmd   = shift @ARGV;
$befor = shift @ARGV;
$after = shift @ARGV;

unless (defined($cmd) and defined($befor) and defined($after)) {
    print "Usage: multi cmd before_pat after_pat\n";
    exit(1);
}

@oldfiles = (@ARGV > 0 ? 
	     @ARGV     :
	     glob("*$befor*"));

foreach $old (@oldfiles) {
    # perform substitution
    chomp $old;
    ($new = $old) =~ s/$befor/$after/;
    $old =~ s!(\W)!\\$1!g;
    $new =~ s!(\W)!\\$1!g;

    # build command
    if    ($opt{r}) { $command = "$cmd $old > $new"  }
    elsif ($opt{o}) { $command = "$cmd -o $new $old" }
    else            { $command = "$cmd $old $new"    }

    # execute and/or print
    if ($opt{l}) { # -l(ist) mode
	$stdout = `$command`;
	print "$old\n" if $stdout;
	# else print nothing
    } else { # normal operating mode
	print "$command\n"                  unless $opt{q};
	system($command)                    unless $opt{t};
    }
}
